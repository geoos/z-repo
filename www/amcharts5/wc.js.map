{"version":3,"sources":["webpack://@amcharts/amcharts5/./src/.internal/charts/wordcloud/WordCloudDefaultTheme.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/wordcloud/WordCloud.ts","webpack://@amcharts/amcharts5/./tmp/webpack/wc.js"],"names":["setupDefaultRules","ic","this","_root","interfaceColors","r","rule","bind","setAll","width","height","minFontSize","maxFontSize","excludeWords","angles","minWordLength","step","randomness","autoFit","animationEasing","text","centerX","centerY","position","lineHeight","populateText","setup","target","set","Rectangle","fill","get","fillOpacity","Theme","children","push","Container","layer","opacity","_makeLabels","_defaultThemes","WordCloudDefaultTheme","new","fields","_setDefault","_afterNew","events","on","_currentIndex","dataItems","length","dataItem","label","labels","make","_setDataItem","ghostLabel","_ghostContainer","Color","fontWeight","List","Template","Label","themeTags","template","processDataItem","colors","setRaw","next","makeLabel","_prepareChildren","isDirty","data","_getWords","_dirty","_updateChildren","resolution","_renderer","cols","Math","round","_valuesDirty","_sizeDirty","isPrivateDirty","adjustedFontSize","getPrivate","w","innerWidth","h","innerHeight","smaller","min","bigger","max","_buffer","Array","ceil","_display","clear","_pointSets","i","_sets","setStep","points","_spiralPoints","point","x","y","splice","Infinity","_dataItems","valueWorking","abs","sort","a","b","aValue","bValue","value","setPrivateRaw","smallerSize","fontSize","floor","angle","random","rotation","_process","once","setTimeout","_markDirtyKey","boundsToAdd","_boundsToAdd","context","getLayer","top","left","imageData","right","bottom","getImageData","buffer","n","c","undefined","_processItem","rw","rh","pIndex","intersects","p","cx","cy","_hasColor","animate","key","to","duration","easing","appear","setPrivate","disposeDataItem","removeValue","dispose","input","words","chars","reg","RegExp","res","match","word","pop","item","category","toLowerCase","isCapitalized","minValue","indexOf","maxCount","slice","lword","substr","radius","radiusY","innerRadius","radiusStep","startAngle","endAngle","stepSize","asin","degrees","cos","sin","shift","Series","WordCloud","className","am5wc"],"mappings":"2PAUA,2B,+CA0CA,OA1C2C,a,uGAC1C,sBACC,YAAMA,kBAAiB,WAEvB,IAAMC,EAAKC,KAAKC,MAAMC,gBAChBC,EAAIH,KAAKI,KAAKC,KAAKL,MAEzBG,EAAE,aAAaG,OAAO,CACrBC,MAAO,KACPC,OAAQ,KACRC,aAAa,QAAQ,GACrBC,aAAa,QAAQ,IACrBC,aAAc,GACdC,OAAQ,CAAC,GAAI,IACbC,cAAe,EACfC,KAAM,GACNC,WAAY,EACZC,SAAS,EACTC,gBAAiB,MAAU,WAI3B,IAAMb,EAAOD,EAAE,QAAS,CAAC,cAEzBC,EAAKE,OAAO,CACXY,KAAM,aACNC,QAAS,KACTC,QAAS,KACTC,SAAU,WACVC,WAAY,KACZC,cAAc,IAGfnB,EAAKoB,MAAQ,SAACC,GACbA,EAAOC,IAAI,aAAcC,EAAA,MAAc,EAAK1B,MAAO,CAClD2B,KAAM7B,EAAG8B,IAAI,cACbC,YAAa,SAMlB,EA1CA,CAA2CC,EAAA,G,wFCuJ3C,yE,OASI,yC,gDAAkC,IAClC,sC,yDAEA,2C,gDAA4B,EAAKC,SAASC,KAAKC,EAAA,MAAc,EAAKjC,MAAO,CAAEkC,MAAO,GAAIC,QAAS,SAE/F,sC,gDAA6C,KAC7C,iC,gDAA0B,IAE1B,oC,iDAAqB,IAErB,mC,gDAAmC,KAEnC,wC,yDAsBA,kC,gDAA8C,EAAKC,gB,EA8evD,OAzhB+B,a,+FAuB9B,sBACCrC,KAAKsC,eAAeL,KAAKM,EAAsBC,IAAIxC,KAAKC,QAElDD,KAAKyC,OAAOR,KAAK,WAAY,QAC7BjC,KAAK0C,YAAY,aAAc,SAC/B1C,KAAK0C,YAAY,gBAAiB,YAElC,YAAMC,UAAS,WAEf3C,KAAKC,MAAM2C,OAAOC,GAAG,cAAc,WAC/B,EAAKnB,IAAI,WAAY,EAAKoB,cAAgB,EAAKC,UAAUC,c,+FAejE,SAAiBC,GACb,IAAMC,EAAQlD,KAAKgC,SAASC,KAAKjC,KAAKmD,OAAOC,QAC7CF,EAAMG,aAAaJ,GACnBC,EAAMR,YAAY,OAAQO,EAASpB,IAAI,SACvCqB,EAAMxB,IAAI,KAAM,QAEhBuB,EAASvB,IAAI,QAASwB,GACtBlD,KAAKmD,OAAOlB,KAAKiB,GAEjB,IAAMI,EAAatD,KAAKuD,gBAAgBvB,SAASC,KAAKjC,KAAKmD,OAAOC,QAMlE,OALAE,EAAWD,aAAaJ,GACxBK,EAAWhD,OAAO,CAAEsB,KAAM4B,EAAA,WAAc,GAAWC,WAAY,QAC/DR,EAASvB,IAAI,aAAc4B,GAC3BtD,KAAKmD,OAAOlB,KAAKqB,GAEVJ,K,iGAGX,sBACI,OAAO,IAAIQ,EAAA,EACPC,EAAA,OAAa,KACb,WAAM,OAAAC,EAAA,OAAW,EAAK3D,MAAO,CACzB4D,UAAW,YAAiB,EAAKV,OAAOW,SAASjC,IAAI,YAAa,IAAK,CAAC,YAAa,YACtF,CAAC,EAAKsB,OAAOW,iB,qGAKxB,SAA0Bb,GAItB,GAHA,YAAMc,gBAAe,UAACd,GAGM,MAAxBA,EAASpB,IAAI,QAAiB,CAC9B,IAAImC,EAAShE,KAAK6B,IAAI,UAClBmC,GACAf,EAASgB,OAAO,OAAQD,EAAOE,QAIvClE,KAAKmE,UAAUlB,M,sGAGnB,WACI,YAAMmB,iBAAgB,WAElBpE,KAAKqE,QAAQ,UACbrE,KAAKsE,KAAKhE,OAAON,KAAKuE,UAAUvE,KAAK6B,IAAI,UACzC7B,KAAKwE,OAAa,MAAI,M,qGAI9B,sBACI,YAAMC,gBAAe,WAErB,IAAMC,EAAa1E,KAAKC,MAAM0E,UAAUD,WAClCE,EAAOC,KAAKC,MAAM9E,KAAKC,MAAMM,QAAUmE,GAEzC5D,EAA6B,EAAtBd,KAAK6B,IAAI,OAAQ,GAE5B,GAAI7B,KAAK+E,cAAgB/E,KAAKgF,YAAchF,KAAKiF,eAAe,oBAAqB,CACjF,IAAMC,EAAmBlF,KAAKmF,WAAW,mBAAoB,GAEvDC,EAAIpF,KAAKqF,aACTC,EAAItF,KAAKuF,cAETC,EAAUX,KAAKY,IAAIL,EAAGE,GACtBI,EAASb,KAAKc,IAAIP,EAAGE,GAE3BtF,KAAK4F,QAAUC,MAAMhB,KAAKiB,KAAK9F,KAAKC,MAAMM,QAAUP,KAAKC,MAAMO,SAAWkE,EAAaA,IAAa9C,KAAK,GAErG4D,EAAU,MACV1E,GAAc,GAGlBd,KAAKuD,gBAAgBwC,SAASC,QAC9BhG,KAAKiG,WAAa,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAIlG,KAAKmG,MAAOD,IAAK,CAMjC,IAJA,IAAME,EAAUtF,GAAQd,KAAKmG,MAAQD,GAC/BG,EAASrG,KAAKsG,cAAclB,EAAI,EAAGE,EAAI,EAAGF,EAAGE,EAAG,EAAGc,EAAUd,EAAII,EAAQU,EAAUhB,EAAIM,EAAQ,EAAG,GAG/F,EAAIW,EAAOrD,OAAS,EAAG,GAAK,EAAG,IAAK,CACzC,IAAIuD,EAAQF,EAAO,IAEfE,EAAMC,EAAI,GAAKD,EAAMC,EAAIpB,GAAKmB,EAAME,EAAI,GAAKF,EAAME,EAAInB,IACvDe,EAAOK,OAAO,EAAG,GAIzB1G,KAAKiG,WAAWhE,KAAKoE,GAGzB,IAAI,EAAM,EACN,EAAS,EACT,EAAY,EACZ,EAAWM,IACX,EAAQ,EACZ,OAAY3G,KAAK4G,YAAY,SAAC3D,GAC1B,IAAM4D,EAAe5D,EAASpB,IAAI,eAAgB,GAClD,GAAOgF,EACP,GAAUhC,KAAKiC,IAAID,MAGvB7G,KAAK4G,WAAWG,MAAK,SAACC,EAAGC,GACrB,IAAIC,EAASF,EAAEnF,IAAI,SACfsF,EAASF,EAAEpF,IAAI,SAEnB,OAAIqF,EAASC,GAAgB,EACzBD,EAASC,EAAe,EACrB,KAIX,OAAYnH,KAAK4G,YAAY,SAAC3D,GAE1B,IAAMmE,EAAQnE,EAASpB,IAAI,eAAgB,GAEvCuF,GAAS,IACT,EAAMnE,EAASpB,IAAI,QAAS,IAG5BuF,EAAQ,IACR,EAAYA,GAGZA,EAAQ,IACR,EAAWA,GAGf,OAGJpH,KAAKqH,cAAc,WAAY,GAC/BrH,KAAKqH,cAAc,YAAa,GAChCrH,KAAKqH,cAAc,WAAY,GAC/BrH,KAAKqH,cAAc,eAAgB,EAAM,GACzCrH,KAAKqH,cAAc,mBAAoB,GAEvC,IAAMC,EAAczC,KAAKY,IAAIL,EAAGE,GAC1B,EAAc,kBAAuBtF,KAAK6B,IAAI,cAAe,IAAKyF,GAAepC,EACjF,EAAc,kBAAuBlF,KAAK6B,IAAI,cAAe,KAAMyF,GAAepC,EAElF,EAASlF,KAAK6B,IAAI,SAAU,CAAC,IAEnC,OAAY7B,KAAK4G,YAAY,SAAC3D,GAC1B,IAAMmE,EAAQnE,EAASpB,IAAI,eAAgB,GACrCyB,EAAaL,EAASpB,IAAI,cAC1B0F,EAAW,GAAe,EAAc,IAAgBH,EAAQ,IAAa,EAAY,GAEzF1F,EAAM,EAAKyE,MAAQ,EAAItB,KAAK2C,OAAOD,EAAW,IAAgB,EAAc,IAAgB,EAAKpB,MAAQ,IAC/GlD,EAASgB,OAAO,MAAOvC,GACvBuB,EAASgB,OAAO,WAAYsD,GAE5B,IAAIE,EAAQ,EAAO5C,KAAK2C,MAAM3C,KAAK6C,SAAY,EAAa,SAE5DzE,EAASgB,OAAO,QAASwD,GAEzBnE,EAAWhD,OAAO,CAAEiH,SAAUA,EAAUI,SAAUF,EAAOjB,GAAI,SAGjExG,KAAK4H,UAAW,EAChB5H,KAAK8C,cAAgB,EAErB9C,KAAKC,MAAM2C,OAAOiF,KAAK,cAAc,WACjC,EAAKC,YAAW,WACZ,EAAKF,UAAW,EAChB,EAAKG,cAAc,cACpB,OAIX,IAAMC,EAAchI,KAAKiI,aACzB,GAAID,EAAa,CAWb,IAVA,IAAME,EAAWlI,KAAKuD,gBAAgBwC,SAASoC,WAA2BD,QACpEzB,EAAI5B,KAAKC,MAAMkD,EAAYI,KAC3B5B,EAAI3B,KAAKC,MAAMkD,EAAYK,MAI3BC,GAHAlD,EAAIP,KAAKC,MAAMkD,EAAYO,MAAQP,EAAYK,MAC/C/C,EAAIT,KAAKC,MAAMkD,EAAYQ,OAASR,EAAYI,KAEpCF,EAAQO,aAAajC,EAAGC,EAAGrB,EAAGE,GAAGhB,MAC7CoE,EAAS1I,KAAK4F,QAEhB+C,EAAI,EACCxI,EAAIsG,EAAGtG,EAAIsG,EAAInB,EAAGnF,IACvB,IAAK,IAAIyI,EAAIpC,EAAGoC,EAAIpC,EAAIpB,EAAGwD,IACnB1C,GAAM/F,EAAI,GAAKyE,GAAQA,EAAOgE,GACd,GAAhBN,EAAUK,KACVD,EAAOxC,GAAK,GAEhByC,GAAK,EAGb3I,KAAKiI,kBAAeY,EAGpB7I,KAAK4H,UAAY5H,KAAKqE,QAAQ,aAC9BrE,KAAK8I,kB,kGAIb,sBAGI,GAFA9I,KAAKiI,kBAAeY,EAEhB7I,KAAK8C,cAAgB9C,KAAK+C,UAAUC,OAAQ,CAC5C,IAAM,EAAWhD,KAAK+C,UAAU/C,KAAK8C,eAC/BI,EAAQ,EAASrB,IAAI,SACrB,EAAa,EAASA,IAAI,cAE1B6C,EAAa1E,KAAKC,MAAM0E,UAAUD,WAEpC,EAAK,EAAWnE,QAChB,EAAK,EAAWC,SAEd0H,EAAW,EAAWnC,SAASoC,WAA2BD,QAC1DxG,EAAM,EAASG,IAAI,OAEnBwE,EAASrG,KAAKiG,WAAWvE,GAEzB0D,EAAIpF,KAAKqF,aACTC,EAAItF,KAAKuF,cAETX,EAAOC,KAAKC,MAAM9E,KAAKC,MAAMM,QAAUmE,GAEvC8B,EAAIxG,KAAKwG,IACTC,EAAIzG,KAAKyG,IAET7F,EAASZ,KAAK6B,IAAI,SAAU,CAAC,IAC/BuD,EAAIE,GACA,GAAMF,EAAI,GACV,OAAYxE,GAAQ,SAAC6G,G,MACJ,GAATA,GAAuC,GAAzB,EAAS5F,IAAI,WAC3B,EAASoC,OAAO,QAAS,GACzB,EAAWvC,IAAI,WAAY,GAC3B,WAAW,CAAC,EAAI,GAAG,GAAlB,EAAE,KAAE,EAAE,SAMnB4D,EAAIF,GACA,GAAMA,EAAI,GACV,OAAYxE,GAAQ,SAAC6G,G,MACM,IAAnB5C,KAAKiC,IAAIW,IAAyC,GAAzB,EAAS5F,IAAI,WACtC,EAASoC,OAAO,QAASwD,GACzB,EAAW/F,IAAI,WAAY+F,GAC3B,WAAW,CAAC,EAAI,GAAG,GAAlB,EAAE,KAAE,EAAE,SAMvB,IAAMsB,EAAKlE,KAAKiB,KAAK,EAAKpB,GACpBsE,EAAKnE,KAAKiB,KAAK,EAAKpB,GAE1B,GAAIwD,GAAW,EAAK,GAAK,EAAK,EAK1B,IAJA,IAAIe,EAASpE,KAAKC,MAAMD,KAAK6C,SAAWrB,EAAOrD,OAAShD,KAAK6B,IAAI,aAAc,IAE3EqH,GAAa,EAEVA,GAAY,CAEf,IAAIC,EAAI9C,EAAO4C,GACf,GAAIE,EAAG,CAGH,GAFAD,GAAa,EAETlJ,KAAK8C,cAAgB,EAAG,CACxB,IAAIsG,EAAKvE,KAAKC,OAAOqE,EAAE3C,EAAIA,GAAK9B,EAAaqE,EAAK,GAC9CM,EAAKxE,KAAKC,OAAOqE,EAAE1C,EAAIA,GAAK/B,EAAasE,EAAK,GAClDE,EAAalJ,KAAKsJ,UAAUF,EAAIC,EAAIN,EAAIC,EAAIpE,GAGhD,GAAIuE,EAAE3C,EAAI,EAAK,EAAI,GAAK2C,EAAE3C,EAAI,EAAK,EAAIpB,GAAK+D,EAAE1C,EAAI,EAAK,EAAI,GAAK0C,EAAE1C,EAAI,EAAK,EAAInB,EAC3E2D,IACAC,GAAa,OAGb,GAAKA,EAyBDD,GAAU,MAzBG,CACb,IAAMxB,EAAQ,EAAS5F,IAAI,QAAS,GAC9B0F,EAAW,EAAS1F,IAAI,WAAY,IACnB,QAAnBqB,EAAMrB,IAAI,MACVqB,EAAMqG,QAAQ,CAAEC,IAAK,IAAKC,GAAIN,EAAE3C,EAAGkD,SAAU1J,KAAK6B,IAAI,oBAAqB,GAAI8H,OAAQ3J,KAAK6B,IAAI,qBAChGqB,EAAMqG,QAAQ,CAAEC,IAAK,IAAKC,GAAIN,EAAE1C,EAAGiD,SAAU1J,KAAK6B,IAAI,oBAAqB,GAAI8H,OAAQ3J,KAAK6B,IAAI,qBAChGqB,EAAMqG,QAAQ,CAAEC,IAAK,WAAYC,GAAIhC,EAAOiC,SAAU1J,KAAK6B,IAAI,oBAAqB,GAAI8H,OAAQ3J,KAAK6B,IAAI,qBACzGqB,EAAMqG,QAAQ,CAAEC,IAAK,WAAYC,GAAIlC,EAAUmC,SAAU1J,KAAK6B,IAAI,oBAAqB,GAAI8H,OAAQ3J,KAAK6B,IAAI,uBAG5GqB,EAAM5C,OAAO,CAAEkG,EAAG2C,EAAE3C,EAAGC,EAAG0C,EAAE1C,EAAGkB,SAAUF,EAAOF,SAAUA,IAC1DrE,EAAM0G,UAGV,EAAWtJ,OAAO,CAAEkG,EAAG2C,EAAE3C,EAAGC,EAAG0C,EAAE1C,IAEjC,IAAK,IAAIP,EAAIG,EAAOrD,OAAS,EAAGkD,GAAK,EAAGA,IAAK,CACzC,IAAIK,EAAQF,EAAOH,GACfK,EAAMC,GAAK2C,EAAE3C,EAAI,EAAK,GAAKD,EAAMC,GAAK2C,EAAE3C,EAAI,EAAK,GAAKD,EAAME,GAAK0C,EAAE1C,EAAI,EAAK,GAAKF,EAAME,GAAK0C,EAAE1C,EAAI,EAAK,GACvGJ,EAAOK,OAAOR,EAAG,GAGzBlG,KAAKiI,aAAe,CAAEI,MAAOc,EAAE3C,EAAIA,EAAI,EAAK,GAAK9B,EAAY6D,OAAQY,EAAE3C,EAAIA,EAAI,EAAK,GAAK9B,EAAY0D,KAAMe,EAAE1C,EAAIA,EAAI,EAAK,GAAK/B,EAAY8D,QAASW,EAAE1C,EAAIA,EAAI,EAAK,GAAK/B,QAO/K,CACD,GAAI1E,KAAK6B,IAAI,WAIT,YAHA7B,KAAK8H,YAAW,WACZ,EAAK+B,WAAW,mBAA6D,GAAzC,EAAK1E,WAAW,mBAAoB,MACzE,IAGPjC,EAAMxB,IAAI,KAAM,QAChBwH,GAAa,GAKzBlJ,KAAK8C,oB,qGAMb,SAAuBG,GACnB,YAAM6G,gBAAe,UAAC7G,GACtB,IAAMC,EAAQD,EAASpB,IAAI,SACvBqB,IACAlD,KAAKmD,OAAO4G,YAAY7G,GACxBA,EAAM8G,WAGV,IAAM1G,EAAaL,EAASpB,IAAI,cAC5ByB,IACAtD,KAAKmD,OAAO4G,YAAYzG,GACxBA,EAAW0G,c,+FASnB,SAAoBC,GAChB,IAAIC,EAAoD,GAExD,GAAID,EAAO,CACP,IAAME,EAAQ,q2BACRC,EAAM,IAAIC,OAAO,KAAOF,EAAQ,OAAUA,EAAQ,MAAQA,EAAQ,SAAWA,EAAQ,MAAO,MAC9FG,EAAML,EAAMM,MAAMH,GACtB,IAAKE,EACD,MAAO,GAIX,IADA,IAAIE,OAAI,EAEJA,EAAOF,EAAIG,OADF,CAQT,IADA,IAAIC,OAAI,EACCxE,EAAI,EAAGA,EAAIgE,EAAMlH,OAAQkD,IAC9B,GAAIgE,EAAMhE,GAAGyE,SAASC,eAAiBJ,EAAKI,cAAe,CACvDF,EAAOR,EAAMhE,GACb,MAGJwE,GACAA,EAAKtD,QACApH,KAAK6K,cAAcL,KACpBE,EAAKC,SAAWH,IAIpBN,EAAMjI,KAAK,CACP0I,SAAUH,EACVpD,MAAO,IAKnB,IAAIzG,EAAeX,KAAK6B,IAAI,gBAEtBiJ,EAAW9K,KAAK6B,IAAI,WAAY,GAChChB,EAAgBb,KAAK6B,IAAI,gBAAiB,GAEhD,GAAIiJ,EAAW,GAAKjK,EAAgB,GAAMF,GAAgBA,EAAaqC,OAAS,EAC5E,IAASkD,EAAIgE,EAAMlH,OAAS,EAAGkD,GAAK,EAAGA,IAAK,CACxC,IAAId,EAAI8E,EAAMhE,GACV,EAAOd,EAAEuF,SAETvF,EAAEgC,MAAQ0D,GACVZ,EAAMxD,OAAOR,EAAG,GAEhB,EAAKlD,OAASnC,GACdqJ,EAAMxD,OAAOR,EAAG,GAEhBvF,IAAgD,IAAhCA,EAAaoK,QAAQ,IACrCb,EAAMxD,OAAOR,EAAG,GAK5BgE,EAAMnD,MAAK,SAASC,EAAGC,GACnB,OAAID,EAAEI,OAASH,EAAEG,MACN,EAEFJ,EAAEI,MAAQH,EAAEG,OACT,EAGD,KAIf,IAAM4D,EAAWhL,KAAK6B,IAAI,WAAY8E,KAClCuD,EAAMlH,OAASgI,IACfd,EAAQA,EAAMe,MAAM,EAAGD,IAI/B,OAAOd,K,mGASX,SAAqBM,GACjB,IAAIU,EAAQV,EAAKI,cACjB,OAAOJ,EAAK,IAAMU,EAAM,IACjBV,EAAKW,OAAO,IAAMD,EAAMC,OAAO,IAC/BX,GAAQU,K,mGAInB,SAAqB9B,EAAYC,EAAY+B,EAAgBC,EAAiBC,EAAqBxK,EAAcyK,EAAoBC,EAAoBC,GAMrJ,IAJA,IAAItL,EAAImL,EAAc,IAClB7D,EAAQ+D,EAAa,UACrBnF,EAAS,GAENlG,EAAIiL,EAASG,GAAY,CAE5B,IAAIG,EAAW5K,EAOf,GANI4K,EAAW,EAAIvL,IACfuL,EAAW,EAAIvL,IAGnBsH,GAAS,EAAI5C,KAAK8G,KAAKD,EAAW,EAAIvL,IAE1B,UAAgBsL,GAAaL,EAASE,GAAeC,EAAc,IAC3E,MAGJ,IAAIK,EAAUnE,EAAQ,UAElBlB,EAAQ,CAAEC,EAAG4C,EAAKjJ,EAAI0E,KAAKgH,IAAIpE,GAAQhB,EAAG4C,EAAKlJ,EAAIkL,EAAUD,EAASvG,KAAKiH,IAAIrE,IACnFpB,EAAOpE,KAAKsE,GAEZpG,EAAImL,EAAcM,EAAU,IAAML,EAKtC,OAFAlF,EAAO0F,QAEA1F,K,+FAGX,SAAoBG,EAAWC,EAAWrB,EAAWE,EAAWV,GAC5D,IAAM8D,EAAS1I,KAAK4F,QACpB,GAAI8C,EACA,IAAK,IAAIvI,EAAIsG,EAAGtG,EAAIsG,EAAInB,EAAGnF,GAAK,EAC5B,IAAK,IAAIyI,EAAIpC,EAAGoC,EAAIpC,EAAIpB,EAAGwD,GAAK,EAE5B,GAAiB,GAAbF,GADMvI,EAAI,GAAKyE,GAAQA,EAAOgE,IAE9B,OAAO,EAKvB,OAAO,KArhBX,qC,gDAAkC,cAClC,sC,gDAA0CoD,EAAA,oBAAyB,CAACC,EAAUC,cAshBlF,EAzhBA,CAA+BF,EAAA,GChKxB,MAAMG,EAAQ,I","file":"wc.js","sourcesContent":["import { Theme } from \"../../core/Theme\";\r\nimport { percent, p100, p50 } from \"../../core/util/Percent\";\r\nimport { Rectangle } from \"../../core/render/Rectangle\";\r\n\r\nimport * as $ease from \"../../core/util/Ease\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class WordCloudDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\tr(\"WordCloud\").setAll({\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100,\r\n\t\t\tminFontSize: percent(2),\r\n\t\t\tmaxFontSize: percent(15),\r\n\t\t\texcludeWords: [],\r\n\t\t\tangles: [0, -90],\r\n\t\t\tminWordLength: 1,\r\n\t\t\tstep: 15,\r\n\t\t\trandomness: 0,\r\n\t\t\tautoFit: true,\r\n\t\t\tanimationEasing: $ease.out($ease.cubic)\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Label\", [\"wordcloud\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\ttext: \"{category}\",\r\n\t\t\t\tcenterX: p50,\r\n\t\t\t\tcenterY: p50,\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tlineHeight: p100,\r\n\t\t\t\tpopulateText: true\r\n\t\t\t});\r\n\r\n\t\t\trule.setup = (target) => {\r\n\t\t\t\ttarget.set(\"background\", Rectangle.new(this._root, {\r\n\t\t\t\t\tfill: ic.get(\"background\"),\r\n\t\t\t\t\tfillOpacity: 0\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { CanvasLayer } from \"../../core/render/backend/CanvasRenderer\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { Percent } from \"../../core/util/Percent\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { Time } from \"../../core/util/Animation\";\n\nimport { WordCloudDefaultTheme } from \"./WordCloudDefaultTheme\";\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Template } from \"../../core/util/Template\";\nimport { Label } from \"../../core/render/Label\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport type { IBounds } from \"../../core/util/IBounds\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IWordCloudDataItem extends ISeriesDataItem {\n\n    /**\n     * Category.\n     */\n    category: string;\n\n    /**\n     * Label.\n     */\n    label: Label;\n\n    /**\n     * Label.\n     */\n    ghostLabel: Label;\n\n    /**\n     * Fill color used for the slice and related elements, e.g. legend marker.\n     */\n    fill: Color;\n\n    /**\n     * @ignore\n     */\n    set: number;\n\n    /**\n     * @ignore\n     */\n    angle: number;\n\n    /**\n     * @ignore\n     */\n    fontSize: number;\n}\n\nexport interface IWordCloudSettings extends ISeriesSettings {\n\n    /**\n     * Duration of word animation when chart resizes.\n     */\n    animationDuration?: number;\n\n    /**\n     * An easing function to use for word animations.\n     *\n     * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n     * @default am5.ease.out($ease.cubic)\n     */\n    animationEasing?: (t: Time) => Time;\n\n    /**\n     * @default false\n     */\n    autoFit?: boolean;\n\n    /**\n     * @readonly\n     */\n\n    progress?: number;\n\n    /**\n     * A [[ColorSet]] to use when asigning colors for slices.\n     */\n    colors?: ColorSet;\n\n    /**\n     * A field in data that holds category names.\n     */\n    categoryField?: string;\n\n    /**\n     * A field that holds color for slice fill.\n     */\n    fillField?: string;\n\n    /**\n     * Source text from which words are extracted.\n     */\n    text?: string;\n\n    /**\n     * Absolute or relative font size for the smallest words.\n     */\n    minFontSize?: number | Percent;\n\n    /**\n     * Absolute or relative font size for the biggest words.\n     */\n    maxFontSize?: number | Percent;\n\n    /**\n     * Minimum occurances for a word to be included into cloud.\n     */\n    minValue?: number;\n\n    /**\n     * Maximum number of words to show.\n     */\n    maxCount?: number;\n\n    /**\n     * Array of words  exclude from cloud.\n     */\n    excludeWords?: Array<string>;\n\n    /**\n     * Randomness of word placement (0-1).\n     */\n    randomness?: number;\n\n    /**\n     * Minimum number of characters for a word to be included in the cloud.\n     */\n    minWordLength?: number;\n\n    /**\n     * An array of possible rotation angles for words.\n     */\n    angles?: number[];\n\n    /**\n     * Step for next word placement.\n     */\n    step?: number;\n}\n\nexport interface IWordCloudPrivate extends ISeriesPrivate {\n    adjustedFontSize: number;\n}\n\n/**\n * Creates a [[WordlCloud]] series.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/word-cloud/} for more info\n * @important\n */\nexport class WordCloud extends Series {\n\n    public static className: string = \"WordCloud\";\n    public static classNames: Array<string> = Series.classNames.concat([WordCloud.className]);\n\n    declare public _settings: IWordCloudSettings;\n    declare public _privateSettings: IWordCloudPrivate;\n    declare public _dataItemSettings: IWordCloudDataItem;\n\n    protected _currentIndex: number = 0;\n    protected _timeoutDP?: IDisposer;\n\n    protected _ghostContainer = this.children.push(Container.new(this._root, { layer: 99, opacity: 0.01 }))\n\n    protected _pointSets: Array<Array<IPoint>> = [];\n    protected _sets: number = 3;\n\n    protected _process = false;\n\n    protected _buffer: Array<number> = [];\n\n    protected _boundsToAdd?: IBounds;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(WordCloudDefaultTheme.new(this._root));\n\n        this.fields.push(\"category\", \"fill\");\n        this._setDefault(\"valueField\", \"value\");\n        this._setDefault(\"categoryField\", \"category\");\n\n        super._afterNew();\n\n        this._root.events.on(\"frameended\", () => {\n            this.set(\"progress\", this._currentIndex / this.dataItems.length);\n        })\n    }\n\n\n    /**\n     * A [[ListTemplate]] of all labels in series.\n     *\n     * `labels.template` can also be used to configure labels.\n     */\n    public readonly labels: ListTemplate<Label> = this._makeLabels();\n\n    /**\n     * @ignore\n     */\n    public makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): Label {\n        const label = this.children.push(this.labels.make());\n        label._setDataItem(dataItem);\n        label._setDefault(\"fill\", dataItem.get(\"fill\"));\n        label.set(\"x\", -999999); // do not change!\n\n        dataItem.set(\"label\", label);\n        this.labels.push(label);\n\n        const ghostLabel = this._ghostContainer.children.push(this.labels.make());\n        ghostLabel._setDataItem(dataItem);\n        ghostLabel.setAll({ fill: Color.fromHex(0x000000), fontWeight: \"900\" });\n        dataItem.set(\"ghostLabel\", ghostLabel);\n        this.labels.push(ghostLabel);\n\n        return label;\n    }\n\n    protected _makeLabels(): ListTemplate<Label> {\n        return new ListTemplate(\n            Template.new({}),\n            () => Label._new(this._root, {\n                themeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"wordcloud\", \"series\"])\n            }, [this.labels.template]),\n        );\n    }\n\n\n    protected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n        super.processDataItem(dataItem);\n\n\n        if (dataItem.get(\"fill\") == null) {\n            let colors = this.get(\"colors\");\n            if (colors) {\n                dataItem.setRaw(\"fill\", colors.next());\n            }\n        }\n\n        this.makeLabel(dataItem);\n    }\n\n    public _prepareChildren() {\n        super._prepareChildren();\n\n        if (this.isDirty(\"text\")) {\n            this.data.setAll(this._getWords(this.get(\"text\")));\n            this._dirty[\"text\"] = false;\n        }\n    }\n\n    public _updateChildren() {\n        super._updateChildren();\n\n        const resolution = this._root._renderer.resolution;\n        const cols = Math.round(this._root.width() * resolution);\n        //const rows = Math.round(this._root.height() * resolution);\n        let step = this.get(\"step\", 1) * 2;\n\n        if (this._valuesDirty || this._sizeDirty || this.isPrivateDirty(\"adjustedFontSize\")) {\n            const adjustedFontSize = this.getPrivate(\"adjustedFontSize\", 1);\n\n            const w = this.innerWidth();\n            const h = this.innerHeight();\n\n            const smaller = Math.min(w, h);\n            const bigger = Math.max(w, h);\n\n            this._buffer = Array(Math.ceil(this._root.width() * this._root.height() * resolution * resolution)).fill(0);\n\n            if (smaller < 800) {\n                step = step / 2;\n            }\n\n            this._ghostContainer._display.clear();\n            this._pointSets = [];\n\n            for (let i = 0; i < this._sets; i++) {\n                // bigger step at the beginning\n                const setStep = step * (this._sets - i);\n                const points = this._spiralPoints(w / 2, h / 2, w, h, 0, setStep * h / bigger, setStep * w / bigger, 0, 0)\n\n                // generated more points and remove those out of bounds\n                for (let i = points.length - 1; i >= 0; i--) {\n                    let point = points[i];\n\n                    if (point.x < 0 || point.x > w || point.y < 0 || point.y > h) {\n                        points.splice(i, 1);\n                        continue;\n                    }\n                }\n                this._pointSets.push(points);\n            }\n\n            let sum = 0;\n            let absSum = 0;\n            let valueHigh = 0;\n            let valueLow = Infinity;\n            let count = 0;\n            $array.each(this._dataItems, (dataItem) => {\n                const valueWorking = dataItem.get(\"valueWorking\", 0);\n                sum += valueWorking;\n                absSum += Math.abs(valueWorking);\n            });\n\n            this._dataItems.sort((a, b) => {\n                let aValue = a.get(\"value\");\n                let bValue = b.get(\"value\");\n\n                if (aValue > bValue) return -1;\n                if (aValue < bValue) return 1;\n                return 0;\n\n            })\n\n            $array.each(this._dataItems, (dataItem) => {\n\n                const value = dataItem.get(\"valueWorking\", 0);\n\n                if (value >= absSum) {\n                    sum = dataItem.get(\"value\", 0);\n                }\n\n                if (value > valueHigh) {\n                    valueHigh = value;\n                }\n\n                if (value < valueLow) {\n                    valueLow = value;\n                }\n\n                count++;\n            });\n\n            this.setPrivateRaw(\"valueLow\", valueLow);\n            this.setPrivateRaw(\"valueHigh\", valueHigh);\n            this.setPrivateRaw(\"valueSum\", sum);\n            this.setPrivateRaw(\"valueAverage\", sum / count);\n            this.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\n            const smallerSize = Math.min(w, h);\n            const minFontSize = $utils.relativeToValue(this.get(\"minFontSize\", 10), smallerSize) * adjustedFontSize;\n            const maxFontSize = $utils.relativeToValue(this.get(\"maxFontSize\", 100), smallerSize) * adjustedFontSize;\n\n            const angles = this.get(\"angles\", [0]);\n\n            $array.each(this._dataItems, (dataItem) => {\n                const value = dataItem.get(\"valueWorking\", 0);\n                const ghostLabel = dataItem.get(\"ghostLabel\");\n                const fontSize = minFontSize + (maxFontSize - minFontSize) * (value - valueLow) / (valueHigh - valueLow);\n\n                const set = this._sets - 1 - Math.floor((fontSize - minFontSize) / (maxFontSize - minFontSize) * (this._sets - 1));\n                dataItem.setRaw(\"set\", set);\n                dataItem.setRaw(\"fontSize\", fontSize);\n\n                let angle = angles[Math.floor(Math.random() * (angles.length))];\n\n                dataItem.setRaw(\"angle\", angle);\n\n                ghostLabel.setAll({ fontSize: fontSize, rotation: angle, x: -10000 });\n            })\n\n            this._process = false;\n            this._currentIndex = 0;\n\n            this._root.events.once(\"frameended\", () => {\n                this.setTimeout(() => {\n                    this._process = true;\n                    this._markDirtyKey(\"progress\");\n                }, 50)\n            })\n        }\n\n        const boundsToAdd = this._boundsToAdd;\n        if (boundsToAdd) {\n            const context = (this._ghostContainer._display.getLayer() as CanvasLayer).context;\n            const y = Math.round(boundsToAdd.top);\n            const x = Math.round(boundsToAdd.left);\n            const w = Math.round(boundsToAdd.right - boundsToAdd.left);\n            const h = Math.round(boundsToAdd.bottom - boundsToAdd.top);\n\n            const imageData = context.getImageData(x, y, w, h).data;\n            const buffer = this._buffer;\n\n            let n = 3;\n            for (let r = y; r < y + h; r++) {\n                for (let c = x; c < x + w; c++) {\n                    let i = ((r + 1) * cols - (cols - c));\n                    if (imageData[n] != 0) {\n                        buffer[i] = 1;\n                    }\n                    n += 4;\n                }\n            }\n            this._boundsToAdd = undefined;\n        }\n\n        if (this._process && this.isDirty(\"progress\")) {\n            this._processItem();\n        }\n    }\n\n    protected _processItem() {\n        this._boundsToAdd = undefined;\n\n        if (this._currentIndex < this.dataItems.length) {\n            const dataItem = this.dataItems[this._currentIndex];\n            const label = dataItem.get(\"label\");\n            const ghostLabel = dataItem.get(\"ghostLabel\");\n\n            const resolution = this._root._renderer.resolution;\n\n            let lw = ghostLabel.width();\n            let lh = ghostLabel.height();\n\n            const context = (ghostLabel._display.getLayer() as CanvasLayer).context;\n            const set = dataItem.get(\"set\");\n\n            const points = this._pointSets[set];\n\n            const w = this.innerWidth();\n            const h = this.innerHeight();\n\n            const cols = Math.round(this._root.width() * resolution);\n\n            const x = this.x();\n            const y = this.y();\n\n            const angles = this.get(\"angles\", [0]);\n            if (w > h) {\n                if (lw >= w / 2) {\n                    $array.each(angles, (angle) => {\n                        if (angle == 0 && dataItem.get(\"angle\") != 0) {\n                            dataItem.setRaw(\"angle\", 0);\n                            ghostLabel.set(\"rotation\", 0);\n                            [lw, lh] = [lh, lw];\n                        }\n                    })\n                }\n            }\n\n            if (h > w) {\n                if (lw >= w / 2) {\n                    $array.each(angles, (angle) => {\n                        if (Math.abs(angle) == 90 && dataItem.get(\"angle\") == 0) {\n                            dataItem.setRaw(\"angle\", angle);\n                            ghostLabel.set(\"rotation\", angle);\n                            [lw, lh] = [lh, lw];\n                        }\n                    })\n                }\n            }\n\n            const rw = Math.ceil(lw * resolution);\n            const rh = Math.ceil(lh * resolution);\n\n            if (context && lw > 0 && lh > 0) {\n                let pIndex = Math.round(Math.random() * points.length * this.get(\"randomness\", 0));\n\n                let intersects = true;\n\n                while (intersects) {\n\n                    let p = points[pIndex];\n                    if (p) {\n                        intersects = false;\n\n                        if (this._currentIndex > 0) {\n                            let cx = Math.round((p.x + x) * resolution - rw / 2);\n                            let cy = Math.round((p.y + y) * resolution - rh / 2);\n                            intersects = this._hasColor(cx, cy, rw, rh, cols);\n                        }\n\n                        if (p.x - lw / 2 < 0 || p.x + lw / 2 > w || p.y - lh / 2 < 0 || p.y + lh / 2 > h) {\n                            pIndex++;\n                            intersects = true;\n                        }\n                        else {\n                            if (!intersects) {\n                                const angle = dataItem.get(\"angle\", 0);\n                                const fontSize = dataItem.get(\"fontSize\", 0);\n                                if (label.get(\"x\") != -999999) {\n                                    label.animate({ key: \"x\", to: p.x, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                    label.animate({ key: \"y\", to: p.y, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                    label.animate({ key: \"rotation\", to: angle, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                    label.animate({ key: \"fontSize\", to: fontSize, duration: this.get(\"animationDuration\", 0), easing: this.get(\"animationEasing\") })\n                                }\n                                else {\n                                    label.setAll({ x: p.x, y: p.y, rotation: angle, fontSize: fontSize });\n                                    label.appear();\n                                }\n\n                                ghostLabel.setAll({ x: p.x, y: p.y });\n\n                                for (let i = points.length - 1; i >= 0; i--) {\n                                    let point = points[i]\n                                    if (point.x >= p.x - lw / 2 && point.x <= p.x + lw / 2 && point.y >= p.y - lh / 2 && point.y <= p.y + lh / 2) {\n                                        points.splice(i, 1);\n                                    }\n                                }\n                                this._boundsToAdd = { left: (p.x + x - lw / 2) * resolution, right: (p.x + x + lw / 2) * resolution, top: (p.y + y - lh / 2) * resolution, bottom: (p.y + y + lh / 2) * resolution };\n                            }\n                            else {\n                                pIndex += 2;\n                            }\n                        }\n                    }\n                    else {\n                        if (this.get(\"autoFit\")) {\n                            this.setTimeout(() => {\n                                this.setPrivate(\"adjustedFontSize\", this.getPrivate(\"adjustedFontSize\", 1) * 0.9);\n                            }, 50);\n                            return;\n                        }\n                        label.set(\"x\", -999999);\n                        intersects = false;\n                    }\n                }\n            }\n\n            this._currentIndex++;\n        }\n    }\n    /**\n* @ignore\n*/\n    public disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n        super.disposeDataItem(dataItem);\n        const label = dataItem.get(\"label\");\n        if (label) {\n            this.labels.removeValue(label);\n            label.dispose();\n        }\n\n        const ghostLabel = dataItem.get(\"ghostLabel\");\n        if (ghostLabel) {\n            this.labels.removeValue(ghostLabel);\n            ghostLabel.dispose();\n        }\n    }\n    /**\n * Extracts words and number of their appearances from a text.\n *\n * @ignore\n* @param  input  Source text\n*/\n    protected _getWords(input?: string): Array<{ category: string, value: number }> {\n        let words: Array<{ category: string, value: number }> = [];\n\n        if (input) {\n            const chars = \"\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA67F-\\uA697\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00-\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9@+\";\n            const reg = new RegExp(\"([\" + chars + \"]+[\\-\" + chars + \"]*[\" + chars + \"]+)|([\" + chars + \"]+)\", \"ig\");\n            let res = input.match(reg);\n            if (!res) {\n                return [];\n            }\n\n            let word;\n            while (true) {\n                word = res.pop();\n\n                if (!word) {\n                    break;\n                }\n\n                let item;\n                for (let i = 0; i < words.length; i++) {\n                    if (words[i].category.toLowerCase() == word.toLowerCase()) {\n                        item = words[i];\n                        break;\n                    }\n                }\n                if (item) {\n                    item.value++;\n                    if (!this.isCapitalized(word)) {\n                        item.category = word;\n                    }\n                }\n                else {\n                    words.push({\n                        category: word,\n                        value: 1\n                    })\n                }\n            }\n\n            let excludeWords = this.get(\"excludeWords\");\n\n            const minValue = this.get(\"minValue\", 1);\n            const minWordLength = this.get(\"minWordLength\", 1);\n\n            if (minValue > 1 || minWordLength > 1 || (excludeWords && excludeWords.length > 0)) {\n                for (let i = words.length - 1; i >= 0; i--) {\n                    let w = words[i];\n                    let word = w.category;\n\n                    if (w.value < minValue) {\n                        words.splice(i, 1);\n                    }\n                    if (word.length < minWordLength) {\n                        words.splice(i, 1);\n                    }\n                    if (excludeWords && excludeWords.indexOf(word) !== -1) {\n                        words.splice(i, 1);\n                    }\n                }\n            }\n\n            words.sort(function(a, b) {\n                if (a.value == b.value) {\n                    return 0;\n                }\n                else if (a.value > b.value) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n            });\n\n            const maxCount = this.get(\"maxCount\", Infinity);\n            if (words.length > maxCount) {\n                words = words.slice(0, maxCount);\n            }\n        }\n\n        return words;\n    }\n    /**\n * Checks if word is capitalized (starts with an uppercase) or not.\n *\n * @ignore\n * @param   word  Word\n* @return        Capitalized?\n*/\n    public isCapitalized(word: string): boolean {\n        let lword = word.toLowerCase();\n        return word[0] != lword[0]\n            && word.substr(1) == lword.substr(1)\n            && word != lword;\n    }\n\n\n    public _spiralPoints(cx: number, cy: number, radius: number, radiusY: number, innerRadius: number, step: number, radiusStep: number, startAngle: number, endAngle: number): IPoint[] {\n\n        let r = innerRadius + 0.01;\n        let angle = startAngle * $math.RADIANS;\n        let points = [];\n\n        while (r < radius + radiusStep) {\n\n            let stepSize = step;\n            if (stepSize / 2 > r) {\n                stepSize = 2 * r;\n            }\n\n            angle += 2 * Math.asin(stepSize / 2 / r);\n\n            if (angle * $math.DEGREES > endAngle + ((radius - innerRadius) / radiusStep) * 360) {\n                break;\n            }\n\n            let degrees = angle * $math.DEGREES;\n\n            let point = { x: cx + r * Math.cos(angle), y: cy + r * radiusY / radius * Math.sin(angle) };\n            points.push(point);\n\n            r = innerRadius + degrees / 360 * radiusStep;\n        }\n\n        points.shift();\n\n        return points;\n    }\n\n    protected _hasColor(x: number, y: number, w: number, h: number, cols: number): boolean {\n        const buffer = this._buffer;\n        if (buffer) {\n            for (let r = y; r < y + h; r += 4) {\n                for (let c = x; c < x + w; c += 4) {\n                    let i = ((r + 1) * cols - (cols - c));\n                    if (buffer[i] != 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false\n    }\n}\n","import * as m from \"./../../dist/es2015/wc.js\";\nexport const am5wc = m;"],"sourceRoot":""}